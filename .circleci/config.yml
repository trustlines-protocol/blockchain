version: 2.1

executors:
  ubuntu-builder:
    docker:
      - image: trustlines/builder:master25
        environment:
          - SOLC_VERSION=v0.5.8
    working_directory: ~/repo

# define some common commands
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21
commands:
  config-contracts-path:
    description: "Set environment variables and change PATH for contracts"
    steps:
    - run:
        name: Configuring PATH
        command: |
          echo 'export PATH=~/bin:~/repo/contracts-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
          echo 'export VIRTUAL_ENV=~/repo/contracts-venv' >> ${BASH_ENV}

  create-venv:
    description: "Create venv"
    steps:
      - run:
          name: Create python virtualenv
          command: |
            make setup-venv
            pip install -c constraints.txt pip wheel setuptools

  config-auction-path:
    description: "Set environment variables and change PATH for auction"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/auction-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/auction-venv' >> ${BASH_ENV}

  config-validator-set-path:
    description: "Set environment variables and change PATH for validator-set"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/validator-set-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/validator-set-venv' >> ${BASH_ENV}

  config-bridge-deploy-path:
    description: "Set environment variables and change PATH for bridge deployment"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/bridge-deploy-venv/bin:${PATH}' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/bridge-deploy-venv' >> ${BASH_ENV}

  config-bridge-validator-path:
    description: "Set environment variables and change PATH for bridge validator"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/bridge-validator-venv/bin:${PATH}' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/bridge-validator-venv' >> ${BASH_ENV}

  upload-docker-image:
    description: "Deploy docker image"
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
            docker image ls
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload docker images
          command: |
            echo "Uploading to $DOCKER_REPO"
            CLEAN_BRANCH_NAME=${CIRCLE_BRANCH##*/}
            # e.g. transforms 'bridge/pre-release' to 'pre-release'

            docker tag $LOCAL_IMAGE $DOCKER_REPO:$CLEAN_BRANCH_NAME$CIRCLE_BUILD_NUM
            docker push $DOCKER_REPO:$CLEAN_BRANCH_NAME$CIRCLE_BUILD_NUM

            docker tag $LOCAL_IMAGE $DOCKER_REPO:$CLEAN_BRANCH_NAME
            docker push $DOCKER_REPO:$CLEAN_BRANCH_NAME

  compare-docker-image:
    description: "Compare docker images"
    parameters:
      repo:
        type: string
    steps:
      - run:
          name: Fetch latest pre-release
          command: |
            docker pull << parameters.repo >>
      - run:
          name: Compute image tree summaries
          command: |
            .circleci/show-docker-tree << parameters.repo >> >/tmp/tree-pre-release
            .circleci/show-docker-tree $LOCAL_IMAGE >/tmp/tree-local
      - run:
          name: Compare image tree summaries
          command: |
            diff -s /tmp/tree-pre-release /tmp/tree-local || true

jobs:
  pre-commit-checks:
    executor: ubuntu-builder
    steps:
      - checkout
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
      - run:
          name: Create python virtualenv
          command: |
            make setup-venv
            pip install -c constraints.txt pip wheel setuptools
      - run:
          name: Install pre-commit
          command: |
            pip install -c constraints.txt pre-commit
      - restore_cache:
          key: pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run:
          name: Install hooks
          command: |
            pre-commit install-hooks
      - save_cache:
          key: pre-commit-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit

      - run:
          name: Run shfmt
          command: |
            pre-commit run -a shfmt
      - run:
          name: Run shellcheck
          command: |
            pre-commit run -a shellcheck
      - run:
          name: Check for large files
          command: |
            pre-commit run -a check-added-large-files
      - run:
          name: Check byte order mark
          command: |
            pre-commit run -a check-byte-order-marker
      - run:
          name: Check merge conflict
          command: |
            pre-commit run -a check-merge-conflict
      - run:
          name: Check json files
          command: |
            pre-commit run -a check-json
      - run:
          name: Check yaml files
          command: |
            pre-commit run -a check-yaml
      - run:
          name: Run end-of-file-fixer
          command: |
            pre-commit run -a end-of-file-fixer
      - run:
          name: Run trailing-whitespace fixer
          command: |
            pre-commit run -a trailing-whitespace
      - run:
          name: Run prettier
          command: |
            pre-commit run -a prettier

      - run:
          name: Run isort
          command: |
            pre-commit run -a isort

  run-black:
    executor: ubuntu-builder
    steps:
      - checkout
      - run:
          name: Create python virtualenv
          command: |
            make setup-venv
      - run:
          name: Install black
          command: |
            venv/bin/pip install -c constraints.txt black
      - run:
          name: Run black
          command: |
            venv/bin/black --exclude venv --check .

  run-flake8:
    executor: ubuntu-builder
    steps:
      - checkout
      - run:
          name: Create python virtualenv
          command: |
            make setup-venv
      - run:
          name: Install flake8
          command: |
            venv/bin/pip install -c constraints.txt flake8 pep8-naming
      - run:
          name: Run flake8
          command: |
            venv/bin/flake8 --exclude venv .

  solium-contracts:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-contracts-path
      - run:
          name: Install ethlint (=solium)
          command: |
            npm install -g 'ethlint@>=1.0.9'
      - run:
          name: Run solium
          command: |
            cd contracts
            solium --dir contracts
  install-contracts:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-contracts-path
      - restore_cache:
          key: contracts-venv-{{ checksum "contracts/constraints.txt" }}-{{ checksum "contracts/requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements
          command: |
            make -C contracts install-requirements
      - save_cache:
          key: contracts-venv-{{ checksum "contracts/constraints.txt" }}-{{ checksum "contracts/requirements.txt" }}
          paths:
            - contracts-venv
      - run:
          name: Install contracts
          command: |
            make -C contracts install
      - persist_to_workspace:
          root: "~"
          paths:
            - repo
  pytest-contracts:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-contracts-path
      - run:
          name: Run pytest
          command: pytest contracts/tests

  test-quickstart:
    executor: ubuntu-builder
    steps:
      - checkout
      - restore_cache:
          key: quickstart-venv-{{ checksum "tools/quickstart/constraints.txt" }}-{{ checksum "tools/quickstart/requirements.txt"}}-{{ checksum "requirements-dev.txt"}}
      - run:
          name: Install requirements
          command: |
            make -C tools/quickstart install-requirements
      - save_cache:
          key: quickstart-venv-{{ checksum "tools/quickstart/constraints.txt" }}-{{ checksum "tools/quickstart/requirements.txt"}}-{{ checksum "requirements-dev.txt"}}
          paths:
            - venv
      - run:
          name: Install tools/quickstart
          command: |
            make -C tools/quickstart install
      - run:
          name: Run tests
          command: |
            make -C tools/quickstart test

  mypy-auction:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports tools/auction-deploy/tests tools/auction-deploy/auction_deploy tools/auction-deploy/setup.py

  install-auction:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-auction-path
      - restore_cache:
          key: auction-venv-{{ checksum "tools/auction-deploy/constraints.txt" }}-{{ checksum "tools/auction-deploy/requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements
          command: |
            make -C tools/auction-deploy install-requirements
      - save_cache:
          key: auction-venv-{{ checksum "tools/auction-deploy/constraints.txt" }}-{{ checksum "tools/auction-deploy/requirements.txt" }}
          paths:
            - auction-venv
      - run:
          name: Install auction-deploy
          command: |
            make -C tools/auction-deploy install
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  pytest-auction:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run pytest
          command: |
            cd tools/auction-deploy
            make test
            cd ..

  mypy-validator-set:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports tools/validator-set-deploy/tests tools/validator-set-deploy/validator_set_deploy tools/validator-set-deploy/setup.py

  install-validator-set:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-validator-set-path
      - restore_cache:
          key: validator-set-venv-{{ checksum "tools/validator-set-deploy/constraints.txt" }}-{{ checksum "tools/validator-set-deploy/requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements and validator-set deploy tool
          command: |
            make -C tools/validator-set-deploy install
      - save_cache:
          key: validator-set-venv-{{ checksum "tools/validator-set-deploy/constraints.txt" }}-{{ checksum "tools/validator-set-deploy/requirements.txt" }}
          paths:
            - validator-set-venv
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  pytest-validator-set:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run pytest
          command: |
            make -C tools/validator-set-deploy test

  mypy-bridge-deploy:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-deploy-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports tools/bridge-deploy/tests tools/bridge-deploy/bridge_deploy tools/bridge-deploy/setup.py

  install-bridge-deploy:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-bridge-deploy-path
      - restore_cache:
          key: bridge-deploy-venv-{{ checksum "tools/bridge-deploy/constraints.txt" }}-{{ checksum "tools/bridge-deploy/requirements.txt" }}
      - create-venv
      - run:
          name: Install requirements and bridge deploy tool
          command: |
            make -C tools/bridge-deploy install
      - save_cache:
          key: bridge-deploy-venv-{{ checksum "tools/bridge-deploy/constraints.txt" }}-{{ checksum "tools/bridge-deploy/requirements.txt" }}
          paths:
            - bridge-deploy-venv
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  pytest-bridge-deploy:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-deploy-path
      - run:
          name: Run pytest
          command: |
            make -C tools/bridge-deploy test

  mypy-bridge-validator:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-validator-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports tools/bridge/tests tools/bridge/end2end-tests/tests tools/bridge/bridge tools/bridge/setup.py

  install-bridge-validator:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-bridge-validator-path
      - restore_cache:
          key: bridge-validator-venv-{{ checksum "tools/bridge/constraints.txt" }}-{{ checksum "tools/bridge/requirements.txt" }}
      - create-venv
      - run:
          name: Install codecov
          command: |
            pip install -c constraints.txt codecov
      - run:
          name: Install requirements and bridge validator client
          command: |
            make -C tools/bridge install
      - save_cache:
          key: bridge-validator-venv-{{ checksum "tools/bridge/constraints.txt" }}-{{ checksum "tools/bridge/requirements.txt" }}
          paths:
            - bridge-validator-venv
      - run:
          name: Build dist
          command: |
            make -C tools/bridge dist

      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  upload-pypi-bridge-validator:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-validator-path
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Upload to pypi
          command: |
            twine upload tools/bridge/dist/*

  pytest-bridge-validator:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-validator-path
      - run:
          name: Run pytest
          command: |
            cd tools/bridge
            make test-coverage
            codecov --flags bridge_unit --prefix tools/bridge/
      - store_test_results:
          path: tools/bridge/test-results

  end2end-test-bridge-validator:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-bridge-validator-path
      - run:
          name: Install parity
          command: curl -o ~/bin/parity https://releases.parity.io/ethereum/v2.6.4/x86_64-unknown-linux-gnu/parity
      - run:
          name: Make parity executable
          command: chmod 755 ~/bin/parity
      - run:
          name: Run pytest
          command: |
            cd tools/bridge
            make test-end2end-coverage
            codecov --flags bridge_end2end --prefix tools/bridge/

  build-bridge-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: bridge-next
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build bridge image
          command: |
            docker build -f tools/bridge/Dockerfile -t $LOCAL_IMAGE .
      - run:
          name: Save bridge image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
            du -hc ~/images
      - persist_to_workspace:
          root: '~'
          paths:
            - images

  compare-bridge-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: bridge-next
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: '~'
      - run:
          name: Load bridge image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - compare-docker-image:
          repo: "trustlines/bridge-next:pre-release"

  deploy-bridge-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: bridge-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/bridge-next}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.

      - upload-docker-image

  deploy-bridge-release-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: bridge-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/bridge}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.
      - upload-docker-image
      - run:
          name: upload latest image
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

  build-quickstart-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: quickstart
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build quickstart image
          command: |
            make -C tools/quickstart build-docker-image
      - run:
          name: Save quickstart image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
            du -hc ~/images
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  deploy-quickstart-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: quickstart
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/quickstart}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.

      - upload-docker-image

  build-testnet-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build -f chain/laika/Dockerfile -t $LOCAL_IMAGE ./chain
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
            du -hc ~/images
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  build-tlbc-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-next
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build -f chain/tlbc/Dockerfile -t $LOCAL_IMAGE ./chain
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
            du -hc ~/images
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  smoketest-testnet-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Smoketest docker image
          command: ./chain/smoke-test.sh $LOCAL_IMAGE

  smoketest-tlbc-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-next
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Smoketest docker image
          command: ./chain/smoke-test.sh $LOCAL_IMAGE

  compare-testnet-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - compare-docker-image:
          repo: "trustlines/tlbc-testnet-next:pre-release"

  compare-tlbc-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-next
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - compare-docker-image:
          repo: "trustlines/tlbc-node-next:pre-release"

  deploy-testnet-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/tlbc-testnet-next}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.
      - upload-docker-image

  deploy-tlbc-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/tlbc-node-next}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.
      - upload-docker-image

  deploy-testnet-docker-release-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/tlbc-testnet}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.
      - upload-docker-image
      - run:
          name: upload latest image
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

  deploy-tlbc-docker-release-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-next
    working_directory: ~/repo
    steps:
      - run:
          name: set DOCKER_REPO
          command: |
            echo ': \"${DOCKER_REPO:=trustlines/tlbc-node}\"' >> ${BASH_ENV}
          # this allows us to set DOCKER_REPO from circleci when building in a
          # fork. makes testing easier.
      - upload-docker-image
      - run:
          name: upload latest image
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

workflows:
  version: 2
  default:
    jobs:
      - pre-commit-checks
      - run-black
      - run-flake8
      - solium-contracts
      - install-contracts
      - pytest-contracts:
          requires:
            - install-contracts
      - install-auction
      - mypy-auction:
          requires:
            - install-auction
      - pytest-auction:
          requires:
            - install-auction
      - install-validator-set
      - mypy-validator-set:
          requires:
            - install-validator-set
      - pytest-validator-set:
          requires:
            - install-validator-set

      - install-bridge-deploy
      - mypy-bridge-deploy:
          requires:
            - install-bridge-deploy
      - pytest-bridge-deploy:
          requires:
            - install-bridge-deploy

      - install-bridge-validator
      - mypy-bridge-validator:
          requires:
            - install-bridge-validator
      - pytest-bridge-validator:
          requires:
            - install-bridge-validator
      - end2end-test-bridge-validator:
          requires:
            - install-bridge-validator

      - build-bridge-image
      - build-testnet-docker-image
      - build-tlbc-docker-image
      - build-quickstart-image
      - test-quickstart
      - deploy-bridge-image:
          filters:
            branches:
              only:
                - master
                - bridge/pre-release
          requires:
            - pre-commit-checks
            - run-black
            - run-flake8
            - mypy-bridge-validator
            - pytest-bridge-validator
            - end2end-test-bridge-validator
            - build-bridge-image
          context: docker-credentials

      - smoketest-testnet-docker-image:
          requires:
            - build-testnet-docker-image
      - smoketest-tlbc-docker-image:
          requires:
            - build-tlbc-docker-image
      - deploy-testnet-docker-image:
          filters:
            branches:
              only:
                - master
                - laika-node/pre-release
          requires:
            - solium-contracts
            - pre-commit-checks
            - run-black
            - run-flake8
            - install-contracts
            - pytest-contracts
            - build-testnet-docker-image
            - smoketest-testnet-docker-image
          context: docker-credentials

      - deploy-tlbc-docker-image:
          filters:
            branches:
              only:
                - master
                - laika-node/pre-release
          requires:
            - solium-contracts
            - pre-commit-checks
            - run-black
            - run-flake8
            - install-contracts
            - pytest-contracts
            - build-tlbc-docker-image
            - smoketest-testnet-docker-image
          context: docker-credentials
      - deploy-quickstart-image:
          filters:
            branches:
              only:
                - master
          requires:
            - test-quickstart
            - build-quickstart-image
            - pre-commit-checks
            - run-black
            - run-flake8
          context: docker-credentials
      - compare-testnet-docker-image:
          filters:
            branches:
              only:
                - laika-node/release
          requires:
            - build-testnet-docker-image
      - compare-tlbc-docker-image:
          filters:
            branches:
              only:
                - tlbc-node/release
          requires:
            - build-tlbc-docker-image
      - compare-bridge-image:
          filters:
            branches:
              only:
                - bridge/release
          requires:
            - build-bridge-image

      - approve-testnet-docker-release:
          type: approval
          filters:
            branches:
              only:
                - laika-node/release
          requires:
            - compare-testnet-docker-image

      - approve-tlbc-docker-release:
          type: approval
          filters:
            branches:
              only:
                - tlbc-node/release
          requires:
            - compare-tlbc-docker-image
      - approve-bridge-release:
          type: approval
          filters:
            branches:
              only:
                - bridge/release
          requires:
            - compare-bridge-image

      - deploy-testnet-docker-release-image:
          filters:
            branches:
              only:
                - laika-node/release
          requires:
            - approve-testnet-docker-release
            - solium-contracts
            - pre-commit-checks
            - run-black
            - run-flake8
            - install-contracts
            - pytest-contracts
            - build-testnet-docker-image
            - smoketest-testnet-docker-image
          context: docker-release-credentials

      - deploy-tlbc-docker-release-image:
          filters:
            branches:
              only:
                - tlbc-node/release
          requires:
            - approve-tlbc-docker-release
            - solium-contracts
            - pre-commit-checks
            - run-black
            - run-flake8
            - install-contracts
            - pytest-contracts
            - build-tlbc-docker-image
            - smoketest-tlbc-docker-image
          context: docker-release-credentials
      - deploy-bridge-release-image:
          filters:
            branches:
              only:
                - bridge/release
          requires:
            - approve-bridge-release
            - pre-commit-checks
            - run-black
            - run-flake8
            - mypy-bridge-validator
            - pytest-bridge-validator
            - build-bridge-image
          context: docker-release-credentials

      - upload-pypi-bridge-validator:
          context: pypi-credentials
          filters:
            branches:
              only:
                - bridge/pre-release
                - bridge/release
          requires:
            - install-bridge-validator
            - pre-commit-checks
            - run-black
            - run-flake8
            - mypy-bridge-validator
            - pytest-bridge-validator
            - build-bridge-image
