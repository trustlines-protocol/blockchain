version: 2.1

executors:
  ubuntu-builder:
    docker:
      - image: trustlines/builder:master21
        environment:
          - SOLC_VERSION=v0.5.8
    working_directory: ~/repo

# define some common commands
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21
commands:
  create-contracts-venv:
    description: "Create contracts venv"
    steps:
      - run:
          name: Create python venv
          command: |
            python3 -m venv contracts-venv
            contracts-venv/bin/pip install -c contracts/constraints.txt pip wheel setuptools

  config-contracts-path:
    description: "Set environment variables and change PATH for contracts"
    steps:
    - run:
        name: Configuring PATH
        command: |
          echo 'export PATH=~/bin:~/repo/contracts-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}

  create-auction-venv:
    description: "Create auction venv"
    steps:
      - run:
          name: Create python venv
          command: |
            python3 -m venv auction-venv
            auction-venv/bin/pip install -c auction-deploy/constraints.txt pip wheel setuptools

  config-auction-path:
    description: "Set environment variables and change PATH for auction"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/auction-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/auction-venv' >> ${BASH_ENV}

  create-validator-set-venv:
    description: "Create validator-set venv"
    steps:
      - run:
          name: Create python venv
          command: |
            python3 -m venv validator-set-venv
            validator-set-venv/bin/pip install -c validator-set-deploy/constraints.txt pip wheel setuptools

  config-validator-set-path:
    description: "Set environment variables and change PATH for validator-set"
    steps:
      - run:
          name: Configuring PATH
          command: |
            echo 'export PATH=~/bin:~/repo/validator-set-venv/bin:${PATH}; . ~/.nvm/nvm.sh' >> ${BASH_ENV}
            echo 'export VIRTUAL_ENV=~/repo/validator-set-venv' >> ${BASH_ENV}

jobs:
  run-contracts-flake8:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-contracts-path
      - run:
          name: Run flake8
          command: |
            flake8 contracts/tests

  run-contracts-black:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-contracts-path
      - run:
          name: Run black
          command: |
            black --check contracts

  run-contracts-solium:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-contracts-path
      - run:
          name: Install ethlint (=solium)
          command: |
            npm install -g 'ethlint@>=1.0.9'
      - run:
          name: Run solium
          command: |
            cd contracts
            solium --dir contracts
  install-contracts:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-contracts-path
      - restore_cache:
          key: contracts-venv-{{ checksum "contracts/constraints.txt" }}-{{ checksum "contracts/requirements.txt" }}
      - create-contracts-venv
      - run:
          name: Install requirements
          command: |
            pip install -c contracts/constraints.txt -r contracts/requirements.txt
      - save_cache:
          key: contracts-venv-{{ checksum "contracts/constraints.txt" }}-{{ checksum "contracts/requirements.txt" }}
          paths:
            - contracts-venv
      - persist_to_workspace:
          root: "~"
          paths:
            - repo
  run-contracts-pytest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-contracts-path
      - run:
          name: Run pytest
          command: pytest contracts/tests

  run-auction-flake8:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run flake8
          command: |
            flake8 auction-deploy/tests auction-deploy/auction_deploy auction-deploy/setup.py

  run-auction-mypy:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports auction-deploy/tests auction-deploy/auction_deploy auction-deploy/setup.py

  run-auction-black:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run black
          command: |
            black --check auction-deploy

  install-auction:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-auction-path
      - restore_cache:
          key: auction-venv-{{ checksum "auction-deploy/constraints.txt" }}-{{ checksum "auction-deploy/requirements.txt" }}
      - create-auction-venv
      - run:
          name: Install requirements and auction deploy tool
          command: |
            cd auction-deploy
            make install
            cd ..
      - save_cache:
          key: auction-venv-{{ checksum "auction-deploy/constraints.txt" }}-{{ checksum "auction-deploy/requirements.txt" }}
          paths:
            - auction-venv
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  run-auction-pytest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-auction-path
      - run:
          name: Run pytest
          command: |
            cd auction-deploy
            make test
            cd ..

  run-validator-set-flake8:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run flake8
          command: |
            flake8 validator-set-deploy/tests validator-set-deploy/validator_set_deploy validator-set-deploy/setup.py

  run-validator-set-mypy:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports validator-set-deploy/tests validator-set-deploy/validator_set_deploy validator-set-deploy/setup.py

  run-validator-set-black:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run black
          command: |
            black --check validator-set-deploy

  install-validator-set:
    executor: ubuntu-builder
    steps:
      - checkout
      - config-validator-set-path
      - restore_cache:
          key: validator-set-venv-{{ checksum "validator-set-deploy/constraints.txt" }}-{{ checksum "validator-set-deploy/requirements.txt" }}
      - create-validator-set-venv
      - run:
          name: Install requirements and validator-set deploy tool
          command: |
            cd validator-set-deploy
            make install
            cd ..
      - save_cache:
          key: validator-set-venv-{{ checksum "validator-set-deploy/constraints.txt" }}-{{ checksum "validator-set-deploy/requirements.txt" }}
          paths:
            - validator-set-venv
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  run-validator-set-pytest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-validator-set-path
      - run:
          name: Run pytest
          command: |
            cd validator-set-deploy
            make test
            cd ..

  build-docker-image:
    executor: ubuntu-builder
    environment:
      LOCAL_IMAGE: tlbc-testnet-next
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build -f docker/Dockerfile -t $LOCAL_IMAGE .
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
            du -hc ~/images
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  deploy-docker-image:
    executor: ubuntu-builder
    environment:
      DOCKER_REPO: trustlines/tlbc-testnet-next
      LOCAL_IMAGE: tlbc-testnet-next
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            du -hc ~/images/*
            docker load --input ~/images/$LOCAL_IMAGE.tar
            docker image ls
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload latest
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

workflows:
  version: 2
  default:
    jobs:
      - run-contracts-solium
      - install-contracts
      - run-contracts-flake8:
          requires:
            - install-contracts
      - run-contracts-black:
          requires:
            - install-contracts
      - run-contracts-pytest:
          requires:
            - install-contracts
      - install-auction
      - run-auction-flake8:
          requires:
            - install-auction
      - run-auction-black:
          requires:
            - install-auction
      - run-auction-mypy:
          requires:
            - install-auction
      - run-auction-pytest:
          requires:
            - install-auction
      - install-validator-set
      - run-validator-set-flake8:
          requires:
            - install-validator-set
      - run-validator-set-black:
          requires:
            - install-validator-set
      - run-validator-set-mypy:
          requires:
            - install-validator-set
      - run-validator-set-pytest:
          requires:
            - install-validator-set
      # building the docker image takes a long time. only do this on dedicated branches
      # At the moment I imagine builds being done the the pre-release branch first
      - build-docker-image:
          filters:
            branches:
              only:
              - release
              - pre-release
      - deploy-docker-image:
          filters:
            branches:
              only:
                - release
                - pre-release
          requires:
            - run-contracts-solium
            - run-contracts-flake8
            - install-contracts
            - run-contracts-pytest
            - build-docker-image
          context: docker-credentials
